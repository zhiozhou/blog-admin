<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="priv.zhou.module.system.user.domain.dao.UserDAO">

    <resultMap id="POMap" type="UserPO">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="salt" property="salt"/>
        <result column="name" property="name"/>
        <result column="phone" property="phone"/>
        <result column="state" property="state"/>
        <result column="create_by" property="createBy"/>
        <result column="gmt_create" property="gmtCreate"/>
        <result column="modified_by" property="modifiedBy"/>
        <result column="is_deleted" property="deleted"/>
    </resultMap>

    <resultMap id="TableVOMap" type="UserTableVO">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="name" property="name"/>
        <result column="phone" property="phone"/>
        <result column="state" property="state"/>
        <result column="roles" property="roles"/>
    </resultMap>

    <resultMap id="VOMap" type="UserVO">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="name" property="name"/>
        <result column="phone" property="phone"/>
        <result column="state" property="state"/>
        <result column="gmt_create" property="gmtCreate"/>
        <collection property="roles" ofType="RoleVO">
            <result column="role_id" property="id"/>
            <result column="role_name" property="name"/>
        </collection>
    </resultMap>

    <resultMap id="PrincipalMap" type="UserPrincipal">
        <result column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="salt" property="salt"/>
        <result column="name" property="name"/>
        <result column="phone" property="phone"/>
        <result column="state" property="state"/>
        <result column="role_names" property="roleNames"/>
    </resultMap>

    <sql id="POSql">
        SELECT
            id,
            username,
            `password`,
            salt,
            `name`,
            phone,
            state,
            create_by,
            gmt_create,
            modified_by,
            gmt_modified,
            is_deleted
        FROM system_user
    </sql>

    <insert id="save" parameterType="UserPO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO system_user (
            username ,
            password ,
            salt ,
            name ,
            phone ,
            state ,
            create_by,
            gmt_create,
            is_deleted
        )  values (
            #{username} ,
            #{password} ,
            #{salt} ,
            #{name} ,
            #{phone} ,
            #{state} ,
            #{createBy} ,
            NOW(),
            0
        )
    </insert>

    <update id="remove" parameterType="UserQuery">
        UPDATE system_user SET is_deleted = 1 WHERE is_deleted = 0 and id = #{id}
    </update>

    <update id="update" parameterType="UserQuery">
        UPDATE system_user
        <set>
            <if test="state != null">state = #{state},</if>
            <if test="name != null and name != ''">`name` = #{name},</if>
            <if test="phone != null and phone != ''">phone = #{phone},</if>
            <if test="password != null and password != ''">`password` = #{password},</if>
            modified_by = #{modifiedBy},
            gmt_modified = NOW()
        </set>
        WHERE id = #{id}
    </update>

    <select id="get" parameterType="UserQuery" resultMap="POMap">
        <include refid="POSql"/>
        <where>
            is_deleted = 0
            <if test="id != null  "> and id = #{id}</if>
            <if test="state != null  "> and state = #{state}</if>
            <if test="phone != null and phone != '' "> and phone = #{phone}</if>
            <if test="username != null and username != '' "> and username = #{username}</if>
        </where>
    </select>

    <select id="getVO" parameterType="UserQuery" resultMap="VOMap">
        SELECT
            `user`.id,
            `user`.username,
            `user`.`name`,
            `user`.phone,
            `user`.state,
            `user`.gmt_create,
            user_role.role_id,
            role.name as role_name
        FROM system_user AS `user`
        LEFT JOIN system_user_role AS user_role ON `user`.id = user_role.user_id
        LEFT JOIN system_role AS role ON user_role.role_id = role.id
        WHERE `user`.is_deleted = 0 and `user`.id = #{id}
    </select>

    <select id="getPrincipal" parameterType="UserQuery" resultMap="PrincipalMap">
        SELECT
            `user`.id,
            `user`.username,
            `user`.`password`,
            `user`.salt,
            `user`.name,
            `user`.phone,
            `user`.state,
            GROUP_CONCAT( role.`name` ) as role_names
        FROM system_user AS `user`
        LEFT JOIN system_user_role AS user_role ON `user`.id = user_role.user_id
        LEFT JOIN system_role AS role ON user_role.role_id = role.id
        WHERE is_deleted = 0 and username = #{username}
        GROUP BY `user`.id
    </select>

    <select id="list" parameterType="UserQuery" resultMap="POMap">
        <include refid="POSql"/>
        <where>
            is_deleted = 0
            <if test="state != null  "> and state = #{state}</if>
            <if test="name != null and name != '' "> and `name` = #{name}</if>
        </where>
    </select>

    <select id="listTableVO" parameterType="UserQuery" resultMap="TableVOMap">
        SELECT
            `user`.id,
            `user`.username,
            `user`.`name`,
            `user`.phone,
            `user`.state,
            GROUP_CONCAT(concat(role.id,'-',role.`name`)) as roles
        FROM system_user AS `user`
        LEFT JOIN system_user_role AS user_role ON `user`.id = user_role.user_id
        LEFT JOIN system_role AS role ON user_role.role_id = role.id
        <where>
            `user`.is_deleted = 0
            <if test="state != null  "> and `user`.state = #{state}</if>
            <if test="nameLike != null and nameLike != ''">and `user`.name LIKE CONCAT('%',#{nameLike},'%')</if>
            <if test="phoneLike != null and phoneLike != ''">and `user`.phone LIKE CONCAT('%',#{phoneLike},'%')</if>
            <if test="usernameLike != null and usernameLike != ''">and `user`.username LIKE CONCAT('%',#{usernameLike},'%')</if>
            <if test="inRoles != null">
                and `role`.id in
                <foreach collection="inRoles" item="roleId" open="(" separator="," close=")">
                    #{roleId}
                </foreach>
            </if>
        </where>
        GROUP BY `user`.id
    </select>

    <select id="count" parameterType="UserQuery" resultType="Integer">
        SELECT
        count(0)
        FROM system_user
        <where>
            is_deleted = 0
            <if test="ridId != null  "> and id != #{ridId}</if>
            <if test="state != null  "> and state = #{state}</if>
            <if test="phone != null and phone != '' "> and phone = #{phone}</if>
            <if test="username != null and username != '' "> and username = #{username}</if>
        </where>
    </select>

    <insert id="relateRole" parameterType="UserRolePO">
        insert system_user_role( user_id , role_id ) values
        <foreach item="item" index="index" collection="list" separator=",">
            (#{item.userId},#{item.roleId})
        </foreach>
    </insert>

    <delete id="unRelateRole" parameterType="Integer">
        delete from system_user_role where user_id = #{userId}
    </delete>

</mapper>
