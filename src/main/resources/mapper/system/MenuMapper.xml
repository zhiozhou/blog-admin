<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="priv.zhou.module.system.menu.domain.dao.MenuDAO">

    <resultMap id="VOMap" type="MenuVO">
        <id column="id" property="id"/>
        <result column="parent_id" property="parentId"/>
        <result column="parent_name" property="parentName"/>
        <result column="name" property="name"/>
        <result column="icon" property="icon"/>
        <result column="path" property="path"/>
        <result column="type" property="type"/>
        <result column="sort" property="sort"/>
        <result column="key" property="key"/>
    </resultMap>

    <resultMap id="TableVOMap" type="MenuVO">
        <id column="id" property="id"/>
        <result column="parent_id" property="parentId"/>
        <result column="name" property="name"/>
        <result column="icon" property="icon"/>
        <result column="path" property="path"/>
        <result column="type" property="type"/>
        <result column="sort" property="sort"/>
        <result column="key" property="key"/>
    </resultMap>

    <insert id="save" parameterType="MenuPO">
        INSERT INTO system_menu(
            parent_id,
            name,
            icon,
            path,
            type,
            state,
            sort,
            `key`,
            flag,
            create_by,
            gmt_create
        )
        VALUES(
            #{parentId},
            #{name},
            #{icon},
            #{path},
            #{type},
            #{state},
            #{sort},
            #{key},
            #{flag},
            #{createBy},
            NOW()
        )
    </insert>

    <delete id="remove" parameterType="Integer">
        delete from system_menu
        where id = #{id} or id in (
            SELECT
            id
            FROM
            (
                SELECT
                t1.*,
                IF( find_in_set( parent_id, @pids ) > 0, @pids := concat( @pids, ',', id ), 0 ) AS ischild
                FROM
                ( SELECT id, `name`, parent_id FROM system_menu t ORDER BY parent_id, id ) t1,
                ( SELECT @pids := #{id} ) t2
            ) t3
            WHERE ischild != 0
        )
    </delete>

    <update id="update" parameterType="MenuPO">
        update system_menu
        <set>
            <if test="parentId != null ">parent_id = #{parentId},</if>
            <if test="name != null and name != ''">name = #{name},</if>
            <if test="icon != null and icon != ''">icon = #{icon},</if>
            <if test="path != null and path != ''">path = #{path},</if>
            <if test="type != null ">type = #{type},</if>
            <if test="state != null ">state = #{state},</if>
            <if test="sort != null ">sort = #{sort},</if>
            <if test="key != null and key != ''">`key` = #{key},</if>
            modified_by = #{modifiedId},
            gmt_modified = NOW()
        </set>
        where id = #{id} and flag = #{flag}
    </update>

    <select id="getVO" parameterType="MenuQuery" resultMap="MenuVO">
        SELECT
            menu.id,
            menu.parent_id,
            IF(menu.parent_id = 0, '根目录', parent_menu.name) parent_name,
            menu.name,
            menu.icon,
            menu.path,
            menu.type,
            menu.sort,
            menu.`key`
        FROM system_menu AS menu
        LEFT JOIN system_menu AS parent_menu ON menu.parent_id = parent_menu.id
        WHERE menu.flag = #{flag} AND menu.id = #{id}
    </select>

    <select id="listTableVO" parameterType="MenuQuery" resultMap="TableVOMap">
        SELECT
            id,
            parent_id,
            system_menu.name,
            icon,
            path,
            type,
            state,
            sort,
            `key`
        FROM system_menu
        <if test="userId != null">
            LEFT JOIN system_role_menu ON system_menu.id = system_role_menu.menu_id
            LEFT JOIN system_user_role ON system_role_menu.role_id = system_user_role.role_id
        </if>
        <where>
            flag = #{flag}
            <if test="userId != null">AND system_user_role.user_id = #{userId}</if>
            <if test="state != null">AND state = #{state}</if>
            <if test="types != null">AND type IN
                <foreach collection="types" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>

    <select id="count" parameterType="MenuQuery" resultType="int">
        SELECT
        COUNT(0)
        FROM
        system_menu
        <where>
            flag = #{flag}
            <if test="exclId != null">and id != #{exclId}</if>
            <if test="parentId != null">and parent_id = #{parentId}</if>
            <if test="name != null and name != ''">and `name` = #{name}</if>
            <if test="key != null and key != ''">and `key` = #{key}</if>
        </where>
    </select>


    <select id="keySet" parameterType="MenuDTO" resultType="string">
        SELECT
            `key`
        FROM
            system_menu
            LEFT JOIN system_role_menu ON system_menu.id = system_role_menu.menu_id
            LEFT JOIN system_user_role ON system_role_menu.role_id = system_user_role.role_id
        WHERE
            state = 0
            AND flag = #{flag}
            AND `key` is not null
            AND system_user_role.user_id = #{userId}
    </select>

</mapper>
